<form>
  <label>search duration analysis</label>
  <search id="search_info">
    <query>(index=_audit host=splunk-sh*  action=search info=granted OR info=completed  search_id  NOT typeahead   NOT "search_id='rsa_*") OR (index=_introspection  host=splunk-sh* TERM(provenance))  | rename data.search_props.sid AS sid data.search_props.provenance AS provenance
| rex "search=\'(?&lt;thesearch&gt;(?:\n|.)*?)\'\, autojoin"
| rex max_match=100 field=search "(?:[^\"\']|^)index=(?&lt;indexes&gt;[^\s\=]+)"
| rex max_match=100 field=search "tag=(?&lt;tags&gt;[^\s+\||\)]+)"
| rex max_match=100 field=search "eventtype=(?&lt;eventtypes&gt;[^\s+\||\)]+)"
| rex max_match=100 field=search "(?&lt;macros&gt;\`[^\s]+\`)"
| eval total_days_searched=(search_lt-search_et)/86400
| eval  total_hours_searched=total_days_searched*24
| eval total_hours_searched=round(total_hours_searched,4)
| eval total_days_searched=round(total_days_searched,0)
| eval search_id=trim(search_id,"\'")
| eval search_id=coalesce(search_id,sid)
| eval origSid=search_id
| rex field=search_id "subsearch_(?&lt;search_id&gt;.*)_\d+\.\d+"
| eval api_et=if(api_et="N/A", search_et, api_et)
| eval total_hours_searched=if(api_et="N/A", "AllTime",total_hours_searched)
| eval total_days_searched=if(api_et="N/A", "AllTime",total_days_searched)
| stats sum(duration_command_search_rawdata_bucketcache_miss) AS  duration__raw_cache_miss sum(invocations_command_search_index_bucketcache_miss) as count_index_cache_miss sum(invocations_command_search_rawdata_bucketcache_miss) as count_rawdata_cache_miss values(total_hours_searched) AS total_hours_searched values(total_days_searched) AS total_days_searched values(user) AS users values(indexes) AS indexes  values(macros) AS macros values(eventtypes) AS eventtypes values(tags) AS tags  values(thesearch) AS search values(savedsearch_name) AS savedsearch_name max(total_run_time) AS run_time values(result_count) AS result_count values(event_count) AS event_count values(searched_buckets) AS searched_buckets values(info) AS info values(provenance) AS provenance dc(origSid) AS numofsearchesinquery by search_id</query>
    <earliest>$field1.earliest$</earliest>
    <latest>$field1.latest$</latest>
  </search>
  <fieldset submitButton="true" autoRun="false">
    <input type="time" token="field1" searchWhenChanged="true">
      <label></label>
      <default>
        <earliest>-12h</earliest>
        <latest>now</latest>
      </default>
    </input>
  </fieldset>
  <row>
    <panel>
      <title>Searches skipping due to running longer than their scheduled time</title>
      <table>
        <title>Blank or 0 earliest_time means all time search unless defined in the search</title>
        <search>
          <query>index=_internal host=splunk-sh* sourcetype=scheduler ( status="skipped" OR status="continued" OR status="deferred") search_type!="*_acceleration"
"The maximum number of concurrent running jobs for this historical scheduled search on this cluster has been reached"
|stats dc(scheduled_time) as skip_count by savedsearch_name
|sort - skip_count
|join left savedsearch_name
[
|rest splunk_server=local /servicesNS/-/-/saved/searches
  search="is_scheduled=1" search="disabled=0"
  |fields search title author cron_schedule eai:acl.app dispatch.earliest_time dispatch.latest_time action.summary_index search
  |rename title as savedsearch_name, dispatch.earliest_time as earliest_time, dispatch.latest_time AS latest_time
]</query>
          <earliest>$field1.earliest$</earliest>
          <latest>$field1.latest$</latest>
        </search>
        <option name="count">10</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>Saved Search deep dive</title>
      <table>
        <search base="search_info">
          <query>|search provenance=scheduler
|search NOT savedsearch_name=""
| stats count as number_of_runs  values(total_hours_searched) AS total_hours_searched values(total_days_searched) AS total_days_searched  values(indexes) AS indexes  values(macros) AS macros values(eventtypes) AS eventtypes values(tags) AS tags  last(search) AS search  max(run_time) AS max_run_time avg(run_time) AS avg_run_time  sum(run_time) AS sum_run_time max(result_count) AS result_count max(event_count) AS event_count max(searched_buckets) AS searched_buckets values(info) AS info values(provenance) AS provenance values(numofsearchesinquery) AS numofsearchesinquery by  savedsearch_name users|sort - sum_run_time
|join left savedsearch_name users
[
|rest splunk_server=local /servicesNS/-/-/saved/searches
  search="is_scheduled=1" search="disabled=0"
  |fields search title author cron_schedule eai:acl.app dispatch.earliest_time dispatch.latest_time
  |rename title as savedsearch_name, dispatch.earliest_time as earliest_time, dispatch.latest_time AS latest_time, author as users
]</query>
        </search>
        <option name="count">10</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>Ad-Hoc Search deep dive</title>
      <table>
        <search base="search_info">
          <query>|search provenance=UI:Search
|eval total_hours_searched=round(total_hours_searched,1)
| stats count as number_of_runs  values(total_hours_searched) AS total_hours_searched values(total_days_searched) AS total_days_searched  values(indexes) AS indexes  values(macros) AS macros values(eventtypes) AS eventtypes values(tags) AS tags  last(search) AS search  max(run_time) AS max_run_time avg(run_time) AS avg_run_time  sum(run_time) AS sum_run_time max(result_count) AS result_count max(event_count) AS event_count max(searched_buckets) AS searched_buckets values(info) AS info  values(numofsearchesinquery) AS numofsearchesinquery by  savedsearch_name users
|eval avg_run_time=round(avg_run_time,1)
|sort - sum_run_time</query>
        </search>
        <option name="count">10</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>Dashboard Overview</title>
      <table>
        <search base="search_info">
          <query>|search provenance=*Dashboard*
|eval total_hours_searched=round(total_hours_searched,1)
| stats count as number_of_runs  max(run_time) AS max_run_time avg(run_time) AS avg_run_time  sum(run_time) AS sum_run_time sum(result_count) AS result_count sum(event_count) AS event_count sum(searched_buckets) AS searched_buckets  values(users) as users by   provenance
|eval avg_run_time=round(avg_run_time,1)
|sort - sum_run_time</query>
        </search>
        <option name="count">10</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>Dashboard Deep dive</title>
      <input type="dropdown" token="provenance" searchWhenChanged="true">
        <label>Dashboard_name</label>
        <choice value="*">all</choice>
        <change>
          <set token="selected_stack">*</set>
        </change>
        <search base="search_info">
          <query>|search provenance=*Dashboard* |stats count by provenance |fields provenance
|eval provenance=ltrim(provenance,"UI:Dashboard:")</query>
        </search>
        <fieldForLabel>provenance</fieldForLabel>
        <fieldForValue>provenance</fieldForValue>
      </input>
      <table>
        <search base="search_info">
          <query>|search provenance=UI:Dashboard:$provenance$
|eval total_hours_searched=round(total_hours_searched,1)
| stats count as number_of_runs values(total_hours_searched) AS total_hours_searched values(total_days_searched) AS total_days_searched  values(indexes) AS indexes  values(macros) AS macros values(eventtypes) AS eventtypes values(tags) AS tags  last(search) AS search  max(run_time) AS max_run_time avg(run_time) AS avg_run_time  sum(run_time) AS sum_run_time max(result_count) AS result_count max(event_count) AS event_count max(searched_buckets) AS searched_buckets values(info) AS info  values(numofsearchesinquery) AS numofsearchesinquery values(users) as users by  savedsearch_name provenance
|eval avg_run_time=round(avg_run_time,1)
|sort - sum_run_time</query>
        </search>
        <option name="count">10</option>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
</form>
 
